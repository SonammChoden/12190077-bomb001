
// is a command
The phase_4 of the bomb001 is of two integer type and the answer of phase_4 is 8 and 35. 
The first value should be greater than 7 which is 8 and the second value is 35. 
If the first input is wrong, the bomb get exploded and function code get recursively exectued until our first input is right.
Thus, recursion is used in the functio code of phase_4


sonam@sonam-Acer-One-14-Z1-4718:~/Downloads/Assignment 1_2 (1)/Assignment 1/bomb001$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_4 //break point at phase_4 to pause the exceution for debugging purpose.
Breakpoint 1 at 0x40100e
(gdb) b explode_bomb //break point to prevent the bomb from exploding.
Breakpoint 2 at 0x40143d
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) r answer.txt      //run the program with the file name we have saved the answer.
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb001/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
test      // Give any string as a test input

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disass
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp // makes stack frame
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) x/s 0x4025cf
0x4025cf:	"%d %d"   //input format of phase_4 which is of integer type.
(gdb) r answer.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb001/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
6 2 //test input

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas         //dissamble code of phase_4
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) u*0x0000000000401034
0x0000000000401034 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000401034 <+38>:	cmp    $0x2,%eax  		// compare eax value (=2) with value(0x2= 2).
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49> // if Not equal it will execute line 49 which is explode bomb. 
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2  //eax value is 2
rbx            0x7fffffffdf18      140737488346904
rcx            0x0                 0
rdx            0x7fffffffde04      140737488346628
rsi            0x0                 0
rdi            0x7fffffffd7b0      140737488345008
rbp            0x0                 0x0
rsp            0x7fffffffde00      0x7fffffffde00
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x401034            0x401034 <phase_4+38>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x0000000000401037 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
=> 0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000401039 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
=> 0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp) //compare rsp value(=6) with value e = 14.
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>   // if rsp value is below or equal, it will execute line 54.
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>   //else explode bomb will execute.
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) x/d $rsp      // find the value of %rsp
0x7fffffffde00:	6
(gdb) u* 0x0000000000401044
0x0000000000401044 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
=> 0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000401049 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
=> 0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) ni
0x000000000040104e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
=> 0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000401051 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
=> 0x0000000000401051 <+67>:	callq  0x400fdb <func4> //execute the line 67 of the fuction.
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) si     //step into the function to see the code of the function.
0x0000000000400fdb in func4 ()
(gdb) disas
Dump of assembler code for function func4:
=> 0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) u*0x0000000000400fec
0x0000000000400fec in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx   //make stack frame
   0x0000000000400fdc <+1>:	mov    %edx,%eax // eax = eax
   0x0000000000400fde <+3>:	sub    %esi,%eax //eax = eax - esi
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx //ebx = eax
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx //0x1f = 31; 3bx =14 >>31. returns most signifincant bit -->0
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax       //eax = eax >> 1; 14 >> 1 --> same as eax/2
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
=> 0x0000000000400fec <+17>:	cmp    %edi,%ebx        // compare first input vs ecx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33> //if 7<= first input, jump pass recursion call
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx  //edx = rbx - 1
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4> //back to the beginning
   0x0000000000400ff8 <+29>:	add    %ebx,%eax  //eax = eax + ebx
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx //compare first input vs 7
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49> //%eax >= rdi --> 7 >= first input
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) i r
rax            0x7                 7
rbx            0x7                 7
rcx            0x0                 0
rdx            0xe                 14
rsi            0x0                 0
rdi            0x6                 6 //first input value we gave is stored in rdi.
rbp            0x0                 0x0
rsp            0x7fffffffddf0      0x7fffffffddf0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x400fec            0x400fec <func4+17>
eflags         0x212               [ AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x0000000000400fee in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
=> 0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ff0 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
=> 0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ff3 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
=> 0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ff8 in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
=> 0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ffa in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
=> 0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x000000000040100c in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
=> 0x000000000040100c <+49>:	pop    %rbx
   0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x000000000040100d in func4 ()
(gdb) disas
Dump of assembler code for function func4:
   0x0000000000400fdb <+0>:	push   %rbx
   0x0000000000400fdc <+1>:	mov    %edx,%eax
   0x0000000000400fde <+3>:	sub    %esi,%eax
   0x0000000000400fe0 <+5>:	mov    %eax,%ebx
   0x0000000000400fe2 <+7>:	shr    $0x1f,%ebx
   0x0000000000400fe5 <+10>:	add    %ebx,%eax
   0x0000000000400fe7 <+12>:	sar    %eax
   0x0000000000400fe9 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400fec <+17>:	cmp    %edi,%ebx
   0x0000000000400fee <+19>:	jle    0x400ffc <func4+33>
   0x0000000000400ff0 <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ff3 <+24>:	callq  0x400fdb <func4>
   0x0000000000400ff8 <+29>:	add    %ebx,%eax
   0x0000000000400ffa <+31>:	jmp    0x40100c <func4+49>
   0x0000000000400ffc <+33>:	mov    %ebx,%eax
   0x0000000000400ffe <+35>:	cmp    %edi,%ebx
   0x0000000000401000 <+37>:	jge    0x40100c <func4+49>
   0x0000000000401002 <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401005 <+42>:	callq  0x400fdb <func4>
   0x000000000040100a <+47>:	add    %ebx,%eax
   0x000000000040100c <+49>:	pop    %rbx
=> 0x000000000040100d <+50>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000401056 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
=> 0x0000000000401056 <+72>:	cmp    $0x23,%eax //compare value eax value with $0x23(equals 35)
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84> //if eax value (=35) and 0x23(=35) is not equal, execute line 84; bomb get 															exploded
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)  
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x15                21       //eax value is 21
rbx            0x7fffffffdf18      140737488346904
rcx            0x0                 0
rdx            0x6                 6
rsi            0x6                 6
rdi            0x6                 6
rbp            0x0                 0x0
rsp            0x7fffffffde00      0x7fffffffde00
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x401056            0x401056 <phase_4+72>
eflags         0x212               [ AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) r answer.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb001/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
8 2 //second test input

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) u*0x0000000000401056
0x0000000000401056 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
=> 0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x23                35  //eax value is 35
rbx            0x7fffffffdf18      140737488346904
rcx            0x0                 0
rdx            0x8                 8
rsi            0x8                 8
rdi            0x8                 8 //first input of second test input
rbp            0x0                 0x0
rsp            0x7fffffffde00      0x7fffffffde00
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x401056            0x401056 <phase_4+72>
eflags         0x212               [ AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x0000000000401059 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
=> 0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) ni
0x000000000040105b in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
=> 0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x23                35
rbx            0x7fffffffdf18      140737488346904
rcx            0x0                 0
rdx            0x8                 8
rsi            0x8                 8
rdi            0x8                 8
rbp            0x0                 0x0
rsp            0x7fffffffde00      0x7fffffffde00
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x40105b            0x40105b <phase_4+77>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 0x7fffffffde04
0x7fffffffde04:	2
(gdb) r answer.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/sonam/Downloads/Assignment 1_2 (1)/Assignment 1/bomb001/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
8 35

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
   0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) u*0x000000000040105b
0x000000000040105b in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:	sub    $0x18,%rsp
   0x0000000000401012 <+4>:	mov    %fs:0x28,%rax
   0x000000000040101b <+13>:	mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:	xor    %eax,%eax
   0x0000000000401022 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401027 <+25>:	mov    %rsp,%rdx
   0x000000000040102a <+28>:	mov    $0x4025cf,%esi
   0x000000000040102f <+33>:	callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:	cmp    $0x2,%eax
   0x0000000000401037 <+41>:	jne    0x40103f <phase_4+49>
   0x0000000000401039 <+43>:	cmpl   $0xe,(%rsp)
   0x000000000040103d <+47>:	jbe    0x401044 <phase_4+54>
   0x000000000040103f <+49>:	callq  0x40143d <explode_bomb>
   0x0000000000401044 <+54>:	mov    $0xe,%edx
   0x0000000000401049 <+59>:	mov    $0x0,%esi
   0x000000000040104e <+64>:	mov    (%rsp),%edi
   0x0000000000401051 <+67>:	callq  0x400fdb <func4>
   0x0000000000401056 <+72>:	cmp    $0x23,%eax
   0x0000000000401059 <+75>:	jne    0x401062 <phase_4+84>
=> 0x000000000040105b <+77>:	cmpl   $0x23,0x4(%rsp) //compare rsp + 4 value with (0x23= 35)
   0x0000000000401060 <+82>:	je     0x401067 <phase_4+89>
   0x0000000000401062 <+84>:	callq  0x40143d <explode_bomb>
   0x0000000000401067 <+89>:	mov    0x8(%rsp),%rax
   0x000000000040106c <+94>:	xor    %fs:0x28,%rax
   0x0000000000401075 <+103>:	je     0x40107c <phase_4+110>
   0x0000000000401077 <+105>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x000000000040107c <+110>:	add    $0x18,%rsp
   0x0000000000401080 <+114>:	retq   
End of assembler dump.
(gdb) i r
rax            0x23                35
rbx            0x7fffffffdf18      140737488346904
rcx            0x0                 0
rdx            0x8                 8
rsi            0x8                 8
rdi            0x8                 8
rbp            0x0                 0x0
rsp            0x7fffffffde00      0x7fffffffde00
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffdf10      140737488346896
r14            0x0                 0
r15            0x0                 0
rip            0x40105b            0x40105b <phase_4+77>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d  0x7fffffffde04
0x7fffffffde04:	35
(gdb) x/d  0x7fffffffde04
0x7fffffffde04:	35
(gdb) u*0x0000000000401080 
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:96
96	    phase_defused();                 //phase_4 is defussed.
(gdb) 
 

